#!/usr/bin/env coffee

program = require 'commander'
fs = require 'fs'
path = require 'path'
EventEmitter = require('events').EventEmitter
testRunnerEvent = new EventEmitter()

process.env.WORKSPACE = path.normalize if process.env.WORKSPACE? then process.env.WORKSPACE else __dirname + '/../../../'

DEFAULT_CAPABILITIES = 'chrome'

# events
missingTestCase = ->
  console.error '  ------------------------- \n  Sorry, test case missing. \n ', '-------------------------'
  console.log '  Examples:'
  console.log ''
  console.log '  Find and run test case via single tag'
  console.log '    $ ./node_modules/test-stack-harness/bin/harness someTag'
  console.log ''
  console.log '  Find and run test cases via tags'
  console.log "    $ ./node_modules/test-stack-harness/bin/harness 'basket&release3'"
  console.log ''
  console.log '  Find and run test case with custom capabilities'
  console.log "    $ ./node_modules/test-stack-harness/bin/harness someTag -c #{DEFAULT_CAPABILITIES}"
  console.log ''
  program.help()
  process.exit 1

missingConfigCson = ->
  console.error '  ------------------------- \n  Sorry, /config.cson missing. \n ', '-------------------------'
  console.log ''
  console.log '  You must create in root directory cson.config. More information on https://github.com/test-stack/harness'
  console.log ''
  process.exit 1

testRunnerEvent.on 'wrongConfiguration', (explain) ->
  console.error "  ------------------------- \n  Sorry, #{explain}. \n -------------------------"
  process.exit 1

program
  .usage '<someTag> [options]'
  .option '-c, --capabilities <capability>', "for example '#{DEFAULT_CAPABILITIES}' - #{DEFAULT_CAPABILITIES} is default value"
  .option '-b, --bail', "bail after first test failure (Mochajs)"
  .option '-t, --timeout <ms>', 'set test-case timeout in milliseconds [5000] (Mochajs)'
  .option '-R, --reporter <name>', "set type of reporter (Mochajs) default is 'spec', or you can use reporter 'elastic'"
  .option '-l, --list <items>', 'A list', (val) -> val.split ','
  .option '-a, --attachments [directory]', 'Directory for screenshots and DOM document when test failed'

program.parse process.argv

# load custom config.cson
configCson = process.env.WORKSPACE + 'config.cson'

(
  fs.exists configCson, (exists) ->
    missingConfigCson() if !exists
    require('cson-config').load configCson

    args = program.args
    missingTestCase() unless args.length is 1

    # add mochajs params to execString
    execString = ''
    mochajsParams = [
      name: 'bail'
      required: no
    ,
      name: 'reporter'
      required: yes
      default: 'spec'
    ,
      name: 'timeout'
      required: yes
      minValue: ms = 5000
      default: ms = 10000
    ]

    runnerArgs = {}

    for switcher in mochajsParams

      programOpt = program[switcher.name]

      # set default values
      programOpt = switcher.default if !programOpt? && switcher.required is yes

      if programOpt

        # rules of switchers
        if switcher.name is 'timeout'
          message = "--#{switcher.name} must be greater than #{switcher.minValue}"
          testRunnerEvent.emit 'wrongConfiguration',message if programOpt < switcher.minValue
          runnerArgs[switcher.name] = programOpt if !isNaN parseInt programOpt

        else
          runnerArgs[switcher.name] = programOpt

    cap = program.capabilities
    process.env.EXPLICIT_WAIT_MS = process.config.EXPLICIT_WAIT_MS
    runnerArgs['capabilities'] = if cap then cap else DEFAULT_CAPABILITIES
    runnerArgs['runBy'] = args[0]
    runnerArgs['list'] = program.list if program.list
    runnerArgs['attachments'] = program.attachments if program.attachments

    require('../runTest.coffee')(runnerArgs)
)
